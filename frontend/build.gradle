import org.ysb33r.gradle.nodejs.tasks.NpmTask

apply plugin: 'org.ysb33r.nodejs.npm'

description = 'Microservice :: Frontend UI'


buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.org.ysb33r.gradle:nodejs-gradle-plugin:0.1"
        classpath "net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:2.1"
    }
}

ext {
    warfileName = 'frontend'
    wlpServerName = 'frontendServer'
}

war {
    archiveName = "${warfileName}.war"
    dependsOn 'cpySrc'
}

nodejs {
     executable version : '10.10.0'
}

npm {
    homeDirectory "$projectDir/npm_build"
}

task npmInstall (type: NpmTask) {
    description = 'Run npm install from Gradle.'
    command 'install'
    outputs.dir("$projectDir/npm_build/node_modules")
}

task cpySrc (type: Copy) {
    from fileTree("${projectDir}/npm_build/dist")
	into "${projectDir}/src/main/webapp"
	dependsOn 'npmLint'
}

task npmBuild(type: NpmTask) {
    description = 'Run npm run build from Gradle.'
    command 'run'
    cmdArgs 'build'
    dependsOn 'npmInstall'
    inputs.files(fileTree("${projectDir}/npm_build/src").matching {
        exclude "**/dist"
    }).withPropertyName("sourceFiles")
    outputs.dir("$projectDir/npm_build/dist").withPropertyName("outputDir")
}

task npmLint (type: NpmTask) {
    description = 'Run npm run lint from Gradle.'
    command 'run'
    cmdArgs 'lint'
    dependsOn 'npmBuild'
    // run onlyIf npmBuild is not UP-TO-DATE
    outputs.dir("$projectDir/npm_build/dist")
}

liberty {
    server {
        name = wlpServerName
        apps = [war]
        configFile = new File("$projectDir/liberty/config/server.xml")
        bootstrapProperties =
            ['httpPort':frontendHttpPort, 'httpsPort':frontendHttpsPort, 'application.name':war.archiveName]
        looseApplication = false
    }
}

task url {
    doLast { println frontendURL + '/login'}
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(":frontend:libertyStart")) {
        libertyStart.doLast {
            println ("Application should be running on ${frontendURL}")
        }
    }
}

clean.dependsOn 'libertyStop'